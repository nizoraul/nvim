[[plugins]]
repo = 'Shougo/dein.vim'

# NERDTreeを設定
[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
" pNERDTreeを自動的に起動する。またディレクトリ指定起動以外はフォーカスをファイルに移動する。
" 終了時にNERDTree以外のバッファがなかったら閉じる
augroup NERDTreeSetting
    autocmd!
    autocmd StdinReadPre * let s:std_in = 1
    if (argc() == 0 || argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in"))
        autocmd vimenter * NERDTreeToggle
    else
        autocmd vimenter * NERDTreeToggle | wincmd p
    endif
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
augroup END
'''

# devicons 利用
[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
'''

# インデント設定
[[plugins]]
repo = 'junegunn/vim-easy-align'

# カラースキーマ
[[plugins]]
repo = 'mrkn/mrkn256.vim'
hook_add = '''
colorscheme mrkn256
syntax enable
'''

# タグジャンプ用タグバー
[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
nmap <F8> :TagbarToggle<CR>
'''

# ステータスライン
[[plugins]]
repo = 'tpope/vim-fugitive'
[[plugins]]
repo = 'vim-airline/vim-airline'
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
	let g:airline_theme = 'wombat'
	let g:airline_powerline_fonts = 1
'''
# インデント可視化
[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
" Vim
let g:indentLine_enabled = 1
let g:indentLine_color_term = 239

" GVim
let g:indentLine_color_gui = '#A4E57E'

" none X terminal
let g:indentLine_color_tty_light = 7 " (default: 4)
let g:indentLine_color_dark = 1 " (default: 2)

" Background (Vim, GVim)
" let g:indentLine_bgcolor_term = 202
" let g:indentLine_bgcolor_gui = '#FF5F00'

let g:indentLine_char_list = ['|', '¦', '┆', '┊']

let g:indentLine_faster = 0
'''
# jsonのシンタックスハイライト（これをindentLineのあとに入れないとjsonのダブルクォーテーションが表示されない）
[[plugins]]
repo     = 'elzr/vim-json'
hook_add = 'let g:vim_json_syntax_conceal = 0'

# コード補完 coc
[[plugins]]
repo = 'neoclide/coc.nvim'
build = 'coc#util#install()'
hook_add = '''
" 設定していないとTextEditが失敗するかも
set hidden

" Use <C-l> スニペット候補表示
imap <C-l> coc-snippets-expand

" 構文エラーメッセージの表示待ち時間(ms)(default=4000)
set updatetime=300

" タブキーで候補選択
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" returnで候補の確定
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" `[c` and `]c` で構文エラーをナビゲート
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

"構文エラー表示設定
highlight CocErrorSign ctermfg=15 ctermbg=196
highlight CocWarningSign ctermfg=0 ctermbg=172

" キーマップ
nmap <silent> fl :<C-u>CocList<cr>
nmap <silent> fh :<C-u>call CocAction('doHover')<cr>
nmap <silent> fd <Plug>(coc-definition)
nmap <silent> fy <Plug>(coc-type-definition)
nmap <silent> fi <Plug>(coc-implementation)
nmap <silent> fr <Plug>(coc-references)
nmap <silent> ff <Plug>(coc-format)

" Kキーでドキュメント表示
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" カーソルの下のシンボルをハイライト表示
autocmd CursorHold * silent call CocActionAsync('highlight')
'''

